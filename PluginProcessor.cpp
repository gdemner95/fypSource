/*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic framework code for a JUCE plugin processor.
 
 ==============================================================================
 */
#include "JuceHeader.h"
#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "DrumSynthSound.h"
#include "DrumSynthVoice.h"

//==============================================================================
Fyp_samplerPrototype2AudioProcessor::Fyp_samplerPrototype2AudioProcessor() : Thread ("loader thread")
{
    /** Setting up multi-voice polyphony*/
    synth.setCurrentPlaybackSampleRate(44100);
    for(int i = 0; i < 32; i++){
        synth.addVoice(new DrumSynthVoice(this));
    }
    
    createEditor();
    
    ////    noteHandler();
    //
    //    //- Will use loops to do this, for now just leaving it like this for clarity of what is actually happening
    //
    //    /** Applying all the sounds */
    //    synth.addSound(new DrumSound(48, 0, 0, 9, 0));/** Bass Drum In */
    //    synth.addSound(new DrumSound(48, 0, 1, 9, 1));/** Bass Drum Out */
    //    synth.addSound(new DrumSound(50, 0, 2, 9, 2));/** Snare Up */
    //    synth.addSound(new DrumSound(50, 0, 3, 9, 3));/** Snare Down */
    //    synth.addSound(new DrumSound(57, 0, 4, 9, 4));/** High Tom */
    //    synth.addSound(new DrumSound(55, 0, 5, 9, 5));/** Mid Tom */
    //    synth.addSound(new DrumSound(53, 0, 6, 9, 6));/** Low Tom */
    //
    //    /** Hats Closed Shaft */
    //    synth.addSound(new DrumSound(54, 0, 8, 0, 7));/** Hats Closed Close Mic */
    //    synth.addSound(new DrumSound(54, 0, 8, 1, 12));/** Hats Closed OH L */
    //    synth.addSound(new DrumSound(54, 0, 8, 2, 12));/** Hats Closed OH R */
    //    synth.addSound(new DrumSound(54, 0, 8, 3, 13));/** Hats Closed Room L */
    //    synth.addSound(new DrumSound(54, 0, 8, 4, 13));/** Hats Closed Room R */
    //
    //    /** Hats Sizzle Shaft */
    //    synth.addSound(new DrumSound(56, 0, 9, 0, 7));/** Hats Closed Close Mic */
    //    synth.addSound(new DrumSound(56, 0, 9, 1, 12));/** Hats Closed OH L */
    //    synth.addSound(new DrumSound(56, 0, 9, 2, 12));/** Hats Closed OH R */
    //    synth.addSound(new DrumSound(56, 0, 9, 3, 13));/** Hats Closed Room L */
    //    synth.addSound(new DrumSound(56, 0, 9, 4, 13));/** Hats Closed Room R */
    //
    //    /** Hats Open Shaft */
    //    synth.addSound(new DrumSound(58, 0, 10, 0, 7));/** Hats Closed Close Mic */
    //    synth.addSound(new DrumSound(58, 0, 10, 1, 12));/** Hats Closed OH L */
    //    synth.addSound(new DrumSound(58, 0, 10, 2, 12));/** Hats Closed OH R */
    //    synth.addSound(new DrumSound(58, 0, 10, 3, 13));/** Hats Closed Room L */
    //    synth.addSound(new DrumSound(58, 0, 10, 4, 13));/** Hats Closed Room R */
    //
    //    /** Hats Pedal */
    //    synth.addSound(new DrumSound(47, 0, 11, 0, 7));/** Hats Closed Close Mic */
    //    synth.addSound(new DrumSound(47, 0, 11, 1, 12));/** Hats Closed OH L */
    //    synth.addSound(new DrumSound(47, 0, 11, 2, 12));/** Hats Closed OH R */
    //    synth.addSound(new DrumSound(47, 0, 11, 3, 13));/** Hats Closed Room L */
    //    synth.addSound(new DrumSound(47, 0, 11, 4, 13));/** Hats Closed Room R */
    //
    //    /** Crash Shaft */
    //    synth.addSound(new DrumSound(60, 0, 15, 0, 8));/** Hats Closed Close Mic */
    //    synth.addSound(new DrumSound(60, 0, 15, 1, 12));/** Hats Closed OH L */
    //    synth.addSound(new DrumSound(60, 0, 15, 2, 12));/** Hats Closed OH R */
    //    synth.addSound(new DrumSound(60, 0, 15, 3, 13));/** Hats Closed Room L */
    //    synth.addSound(new DrumSound(60, 0, 15, 4, 13));/** Hats Closed Room R */
    //
    //    /** Ride Tip */
    //    synth.addSound(new DrumSound(63, 0, 12, 0, 10));/** Hats Closed Close Mic */
    //    synth.addSound(new DrumSound(63, 0, 12, 1, 12));/** Hats Closed OH L */
    //    synth.addSound(new DrumSound(63, 0, 12, 2, 12));/** Hats Closed OH R */
    //    synth.addSound(new DrumSound(63, 0, 12, 3, 13));/** Hats Closed Room L */
    //    synth.addSound(new DrumSound(63, 0, 12, 4, 13));/** Hats Closed Room R */
    //
    //    /** Ride Bell */
    //    synth.addSound(new DrumSound(65, 0, 13, 0, 10));/** Hats Closed Close Mic */
    //    synth.addSound(new DrumSound(65, 0, 13, 1, 12));/** Hats Closed OH L */
    //    synth.addSound(new DrumSound(65, 0, 13, 2, 12));/** Hats Closed OH R */
    //    synth.addSound(new DrumSound(65, 0, 13, 3, 13));/** Hats Closed Room L */
    //    synth.addSound(new DrumSound(65, 0, 13, 4, 13));/** Hats Closed Room R */
    //
    //    /** Splash Crash */
    //    synth.addSound(new DrumSound(66, 0, 14, 0, 9));/** Hats Closed Close Mic */
    //    synth.addSound(new DrumSound(66, 0, 14, 1, 12));/** Hats Closed OH L */
    //    synth.addSound(new DrumSound(66, 0, 14, 2, 12));/** Hats Closed OH R */
    //    synth.addSound(new DrumSound(66, 0, 14, 3, 13));/** Hats Closed Room L */
    //    synth.addSound(new DrumSound(66, 0, 14, 4, 13));/** Hats Closed Room R */
    
}

Fyp_samplerPrototype2AudioProcessor::~Fyp_samplerPrototype2AudioProcessor()
{
}

//==============================================================================
const String Fyp_samplerPrototype2AudioProcessor::getName() const
{
    return JucePlugin_Name;
}

const String Fyp_samplerPrototype2AudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String Fyp_samplerPrototype2AudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool Fyp_samplerPrototype2AudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool Fyp_samplerPrototype2AudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool Fyp_samplerPrototype2AudioProcessor::acceptsMidi() const
{
#if JucePlugin_WantsMidiInput
    return true;
#else
    return false;
#endif
}

bool Fyp_samplerPrototype2AudioProcessor::producesMidi() const
{
#if JucePlugin_ProducesMidiOutput
    return true;
#else
    return false;
#endif
}

bool Fyp_samplerPrototype2AudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double Fyp_samplerPrototype2AudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int Fyp_samplerPrototype2AudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
    // so this should be at least 1, even if you're not really implementing programs.
}

int Fyp_samplerPrototype2AudioProcessor::getCurrentProgram()
{
    return 0;
}

void Fyp_samplerPrototype2AudioProcessor::setCurrentProgram (int index)
{
}

const String Fyp_samplerPrototype2AudioProcessor::getProgramName (int index)
{
    return String();
}

void Fyp_samplerPrototype2AudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void Fyp_samplerPrototype2AudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    sampleRate = 44100;
    synth.setCurrentPlaybackSampleRate(sampleRate);
    
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
    
}

void Fyp_samplerPrototype2AudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void Fyp_samplerPrototype2AudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());
    
    const int numSamples = buffer.getNumSamples();
    
    //    midiMessages.addEvents(const juce::MidiBuffer &otherBuffer, <#int startSample#>, <#int numSamples#>, <#int sampleDeltaToAdd#>) //GRAB FROM A MIDI BUFFER IN THE UI
    //    SET START SAMPLE TO 0 NUM SAMPLES TO numSamples  AND SAMPLEDATA TO 0.
    
    synth.renderNextBlock(buffer, midiMessages, 0, numSamples);
    
}

//==============================================================================
bool Fyp_samplerPrototype2AudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* Fyp_samplerPrototype2AudioProcessor::createEditor()
{
    return new Fyp_samplerPrototype2AudioProcessorEditor (*this);
}

//==============================================================================
void Fyp_samplerPrototype2AudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
    //    destData.setSize(1);
}

void Fyp_samplerPrototype2AudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
    
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new Fyp_samplerPrototype2AudioProcessor();
}


void Fyp_samplerPrototype2AudioProcessor::initiateSoundLoadingThread()
{
    startThread();
}

void Fyp_samplerPrototype2AudioProcessor::run()
{
    loadSounds();
}

void Fyp_samplerPrototype2AudioProcessor::loadSounds()
{
    /** Applying all the sounds */
    if (soundsLoaded.get() == 0)
    {
        
        const int data[][5] = {
            { 48, 0, 0, 9, 0 },
            { 48, 0, 1, 9, 1 },
            { 50, 0, 2, 9, 2 },
            { 50, 0, 3, 9, 3 },
            { 57, 0, 4, 9, 4 },
            { 55, 0, 5, 9, 5 },
            { 53, 0, 6, 9, 6 },
            
            { 54, 0, 8, 0, 7 },
            { 54, 0, 8, 1, 12},
            { 54, 0, 8, 2, 12},
            { 54, 0, 8, 3, 13},
            { 54, 0, 8, 4, 13},
            
            { 56, 0, 9, 0, 7 },
            { 56, 0, 9, 1, 12},
            { 56, 0, 9, 2, 12},
            { 56, 0, 9, 3, 13},
            { 56, 0, 9, 4, 13},
            
            { 58, 0, 10, 0, 7 },
            { 58, 0, 10, 1, 12},
            { 58, 0, 10, 2, 12},
            { 58, 0, 10, 3, 13},
            { 58, 0, 10, 4, 13},
            
            { 47, 0, 11, 0, 7 },
            { 47, 0, 11, 1, 12},
            { 47, 0, 11, 2, 12},
            { 47, 0, 11, 3, 13},
            { 47, 0, 11, 4, 13},
            
            { 60, 0, 15, 0, 8 },
            { 60, 0, 15, 1, 12},
            { 60, 0, 15, 2, 12},
            { 60, 0, 15, 3, 13},
            { 60, 0, 15, 4, 13},
            
            { 66, 0, 14, 0, 9 },
            { 66, 0, 14, 1, 12},
            { 66, 0, 14, 2, 12},
            { 66, 0, 14, 3, 13},
            { 66, 0, 14, 4, 13},
            
            { 63, 0, 12, 0, 10},
            { 63, 0, 12, 1, 12},
            { 63, 0, 12, 2, 12},
            { 63, 0, 12, 3, 13},
            { 63, 0, 12, 4, 13},
            
            { 65, 0, 13, 0, 11},
            { 65, 0, 13, 1, 12},
            { 65, 0, 13, 2, 12},
            { 65, 0, 13, 3, 13},
            { 65, 0, 13, 4, 13},
            
        };
        
        const int count = numElementsInArray(data);
        
        for (int i = 0; i < count; ++i)
        {
            if (threadShouldExit())
                return;
            
            synth.addSound(new DrumSound (data[i][0], data[i][1], data[i][2], data[i][3], data[i][4]));
            fraction.set ((float) i / (count - 1));
        }
        
        //        synth.addSound(new DrumSound(48, 0, 0, 9, 0));/** Bass Drum In */
        //        synth.addSound(new DrumSound(48, 0, 1, 9, 1));/** Bass Drum Out */
        //        synth.addSound(new DrumSound(50, 0, 2, 9, 2));/** Snare Up */
        //        synth.addSound(new DrumSound(50, 0, 3, 9, 3));/** Snare Down */
        //        synth.addSound(new DrumSound(57, 0, 4, 9, 4));/** High Tom */
        //        synth.addSound(new DrumSound(55, 0, 5, 9, 5));/** Mid Tom */
        //        synth.addSound(new DrumSound(53, 0, 6, 9, 6));/** Low Tom */
        //
        //        /** Hats Closed Shaft */
        //        synth.addSound(new DrumSound(54, 0, 8, 0, 7));/** Hats Closed Close Mic */
        //        synth.addSound(new DrumSound(54, 0, 8, 1, 12));/** Hats Closed OH L */
        //        synth.addSound(new DrumSound(54, 0, 8, 2, 12));/** Hats Closed OH R */
        //        synth.addSound(new DrumSound(54, 0, 8, 3, 13));/** Hats Closed Room L */
        //        synth.addSound(new DrumSound(54, 0, 8, 4, 13));/** Hats Closed Room R */
        //
        //        /** Hats Sizzle Shaft */
        //        synth.addSound(new DrumSound(56, 0, 9, 0, 7));/** Hats Closed Close Mic */
        //        synth.addSound(new DrumSound(56, 0, 9, 1, 12));/** Hats Closed OH L */
        //        synth.addSound(new DrumSound(56, 0, 9, 2, 12));/** Hats Closed OH R */
        //        synth.addSound(new DrumSound(56, 0, 9, 3, 13));/** Hats Closed Room L */
        //        synth.addSound(new DrumSound(56, 0, 9, 4, 13));/** Hats Closed Room R */
        //
        //        /** Hats Open Shaft */
        //        synth.addSound(new DrumSound(58, 0, 10, 0, 7));/** Hats Closed Close Mic */
        //        synth.addSound(new DrumSound(58, 0, 10, 1, 12));/** Hats Closed OH L */
        //        synth.addSound(new DrumSound(58, 0, 10, 2, 12));/** Hats Closed OH R */
        //        synth.addSound(new DrumSound(58, 0, 10, 3, 13));/** Hats Closed Room L */
        //        synth.addSound(new DrumSound(58, 0, 10, 4, 13));/** Hats Closed Room R */
        //
        //        /** Hats Pedal */
        //        synth.addSound(new DrumSound(47, 0, 11, 0, 7));/** Hats Closed Close Mic */
        //        synth.addSound(new DrumSound(47, 0, 11, 1, 12));/** Hats Closed OH L */
        //        synth.addSound(new DrumSound(47, 0, 11, 2, 12));/** Hats Closed OH R */
        //        synth.addSound(new DrumSound(47, 0, 11, 3, 13));/** Hats Closed Room L */
        //        synth.addSound(new DrumSound(47, 0, 11, 4, 13));/** Hats Closed Room R */
        //
        //        /** Crash Shaft */
        //        synth.addSound(new DrumSound(60, 0, 15, 0, 8));/** Hats Closed Close Mic */
        //        synth.addSound(new DrumSound(60, 0, 15, 1, 12));/** Hats Closed OH L */
        //        synth.addSound(new DrumSound(60, 0, 15, 2, 12));/** Hats Closed OH R */
        //        synth.addSound(new DrumSound(60, 0, 15, 3, 13));/** Hats Closed Room L */
        //        synth.addSound(new DrumSound(60, 0, 15, 4, 13));/** Hats Closed Room R */
        //
        //        /** Splash Crash */
        //        synth.addSound(new DrumSound(66, 0, 14, 0, 9));/** Hats Closed Close Mic */
        //        synth.addSound(new DrumSound(66, 0, 14, 1, 12));/** Hats Closed OH L */
        //        synth.addSound(new DrumSound(66, 0, 14, 2, 12));/** Hats Closed OH R */
        //        synth.addSound(new DrumSound(66, 0, 14, 3, 13));/** Hats Closed Room L */
        //        synth.addSound(new DrumSound(66, 0, 14, 4, 13));/** Hats Closed Room R */
        //
        //        /** Ride Tip */
        //        synth.addSound(new DrumSound(63, 0, 12, 0, 10));/** Hats Closed Close Mic */
        //        synth.addSound(new DrumSound(63, 0, 12, 1, 12));/** Hats Closed OH L */
        //        synth.addSound(new DrumSound(63, 0, 12, 2, 12));/** Hats Closed OH R */
        //        synth.addSound(new DrumSound(63, 0, 12, 3, 13));/** Hats Closed Room L */
        //        synth.addSound(new DrumSound(63, 0, 12, 4, 13));/** Hats Closed Room R */
        //
        //        /** Ride Bell */
        //        synth.addSound(new DrumSound(65, 0, 13, 0, 10));/** Hats Closed Close Mic */
        //        synth.addSound(new DrumSound(65, 0, 13, 1, 12));/** Hats Closed OH L */
        //        synth.addSound(new DrumSound(65, 0, 13, 2, 12));/** Hats Closed OH R */
        //        synth.addSound(new DrumSound(65, 0, 13, 3, 13));/** Hats Closed Room L */
        //        synth.addSound(new DrumSound(65, 0, 13, 4, 13));/** Hats Closed Room R */
        
        //        /** China Crash */
        //        synth.addSound(new DrumSound(66, 0, 14, 0, 11));/** Hats Closed Close Mic */
        //        synth.addSound(new DrumSound(66, 0, 14, 1, 12));/** Hats Closed OH L */
        //        synth.addSound(new DrumSound(66, 0, 14, 2, 12));/** Hats Closed OH R */
        //        synth.addSound(new DrumSound(66, 0, 14, 3, 13));/** Hats Closed Room L */
        //        synth.addSound(new DrumSound(66, 0, 14, 4, 13));/** Hats Closed Room R */
        
        soundsLoaded.set (1);
    }
}
