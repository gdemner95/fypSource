/*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic framework code for a JUCE plugin processor.
 
 ==============================================================================
 */

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "Synth.h"
class Fyp_samplerPrototype2AudioProcessor  : public AudioProcessor, private Thread
{
public:
    //==============================================================================
    Fyp_samplerPrototype2AudioProcessor(/*DrumSynthAudioSource&*/);
    ~Fyp_samplerPrototype2AudioProcessor();
    
    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    
    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;
    
    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;
    
    //==============================================================================
    const String getName() const override;
    
    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;
    
    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;
    
    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;
    
    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;
    
    //    float sliderValue = 0;
    //
    //    void setSliderValue(float value)
    //    {
    //        sliderValue = 1.0;
    //    };
    //
    //    float getSliderValue()
    //    {
    //        return sliderValue;
    //    };
    
    Fyp_samplerPrototype2AudioProcessor* getProcessor()
    {
        return this;
    }
//    Synthesiser synth;
    gSynth synth;
    
    void initiateSoundLoadingThread();
    
private:
    void run() override;
    void loadSounds();

    
    Atomic<int> soundsLoaded;
    Atomic<float> fraction;
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Fyp_samplerPrototype2AudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
