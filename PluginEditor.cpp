/*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic framework code for a JUCE plugin editor.
 
 ==============================================================================
 */

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "SamplerGUI.h"

//==============================================================================
Fyp_samplerPrototype2AudioProcessorEditor::Fyp_samplerPrototype2AudioProcessorEditor (Fyp_samplerPrototype2AudioProcessor& p)
: AudioProcessorEditor (&p), tabBar(TabbedButtonBar::TabsAtTop), processor (p)
{
    mixer = new MixerComponent();
    seqComp = new SequencerComponent();
    mainGUI = new SamplerGUI();
    setSize(980, 260);
    Rectangle<int> local;
    local = getLocalBounds();
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    addAndMakeVisible(&tabBar);
    tabBar.setSize(local.getWidth(), 800);
    tabBar.addTab("Mixer", Colours::slategrey, mixer, false, 0);
    
    tabBar.addTab("Grooves", Colours::slategrey, seqComp, false, 1);
    
    tabBar.addTab("KeyMapping", Colours::slategrey, mainGUI, false, 2);
    addAndMakeVisible(loadButton = new TextButton("Load Samples!"));
    loadButton->addListener(this);
    loadButton->setBounds(0, 240, local.getWidth(), 20);
    loadButton->setColour(0x1000100, Colours::red);
    setDef();
}

Fyp_samplerPrototype2AudioProcessorEditor::~Fyp_samplerPrototype2AudioProcessorEditor()
{
    //    for(int i = 0; i < 14; i++)
    //    {
    //        sliderValues.add(mixer->getSliderValue(i));
    //    }
}

//==============================================================================
void Fyp_samplerPrototype2AudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::slategrey);
    g.setColour (Colours::black);
    g.setFont (15.0f);
}

void Fyp_samplerPrototype2AudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    mixer->setBounds(getLocalBounds());
}
void Fyp_samplerPrototype2AudioProcessorEditor::buttonClicked(Button* button)
{
    if (button == loadButton)
    {
        loadButton->setColour(0x1000100, Colours::yellow);
        //        processor.loadSounds();
        //setInterceptClicks to false false for non interactable sliders
        //        startTimer();
        processor.initiateSoundLoadingThread();
        
        loadButton->setColour(0x1000100, Colours::green);
    }
}